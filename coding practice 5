const express = require('express')
const path = require('path')

const {open} = require('sqlite')
const sqlite3 = require('sqlite3')
const app = express()
app.use(express.json())

const dbPath = path.join(__dirname, 'moviesData.db')

let db = null

const initializeDBAndServer = async () => {
  try {
    db = await open({
      filename: dbPath,
      driver: sqlite3.Database,
    })
    app.listen(3000, () => {
      console.log('Server Running at http://localhost:3000/')
    })
  } catch (e) {
    console.log(`DB Error: ${e.message}`)
    process.exit(1)
  }
}

initializeDBAndServer()

app.get('/movies/', async (request, response) => {
  const getMovienames = `
    SELECT
      movie_name
    FROM
      movie order by movie_id;`

  const movieArray = await db.all(getMovienames)
  const convertedArray = movieArray.map(convertDbObjectToResponseObject)

  response.send(convertedArray)
})

const convertDbObjectToResponseObject = dbObject => {
  return {
    movieName: dbObject.movie_name,
  }
}

app.post('/movies/', async (request, response) => {
  const moviedetails = request.body
  const {directorId, movieName, leadActor} = moviedetails
  const addmovie = `
    INSERT INTO
      movie (director_id,movie_name,lead_actor)
    VALUES
      (
        ${directorId},
         '${movieName}',
         '${leadActor}'

      );`

  const dbResponse = await db.run(addmovie)
  const movieId = dbResponse.lastID
  response.send('Movie Successfully Added')
})

app.get('/movies/:movieId/', async (request, response) => {
  const {movieId} = request.params
  const getmovie = `
    SELECT
      *
    FROM
      movie 
    WHERE
      movie_id = ${movieId};`
  const singlemovie = await db.get(getmovie)
  const convertedmovie = movieconverted(singlemovie)
  response.send(convertedmovie)
})

const movieconverted = movieObject => {
  return {
    movieId: movieObject.movie_id,
    directorId: movieObject.director_id,
    movieName: movieObject.movie_name,
    leadActor: movieObject.lead_actor,
  }
}

app.put('/movies/:movieId/', async (request, response) => {
  const {movieId} = request.params
  const moviedetails = request.body
  const {directorId, movieName, leadActor} = moviedetails
  const updatemovieQuery = `
    UPDATE
      movie
    SET
      director_id=${directorId},
      movie_name='${movieName}',
      lead_actor='${leadActor}'
    WHERE
      movie_id = ${movieId};`
  await db.run(updatemovieQuery)
  response.send('Movie Details Updated')
})

app.delete('/movies/:movieId/', async (request, response) => {
  const {movieId} = request.params
  const deletemovieQuery = `
    DELETE FROM
      movie
    WHERE
      movie_id = ${movieId};`
  await db.run(deletemovieQuery)
  response.send('Movie Removed')
})

app.get('/directors/', async (request, response) => {
  const getdirectorteam = `
    SELECT
      *
    FROM
      director order by director_id;`

  const directorArray = await db.all(getdirectorteam)
  const converteddirectorArray = directorArray.map(
    convertdirectorDbObjectToResponseObject,
  )

  response.send(converteddirectorArray)
})

const convertdirectorDbObjectToResponseObject = dbdirectorObject => {
  return {
    directorId: dbdirectorObject.director_id,
    directorName: dbdirectorObject.director_name,
  }
}

app.get('/directors/:directorId/movies/', async (request, response) => {
  const {directorId} = request.params
  const getmovieondirectorid = `
    SELECT
  movie.movie_name
FROM
  movie
INNER JOIN
  director ON movie.director_id = director.director_id
  where director.director_id = ${directorId};`
  const movienameondirectorid = await db.all(getmovieondirectorid, [directorId])
  const convertedmovieondirector = movienameondirectorid.map(movie =>
    movieondirectorconverted(movie),
  )
  response.send(convertedmovieondirector)
})

const movieondirectorconverted = moviedirectorObject => {
  return {
    movieName: moviedirectorObject.movie_name,
  }
}

module.exports = app
